<?php

declare(strict_types=1);

namespace Telnyx\PartnerCampaigns;

use Telnyx\Core\Attributes\Api;
use Telnyx\Core\Concerns\SdkModel;
use Telnyx\Core\Contracts\BaseModel;
use Telnyx\PartnerCampaigns\TelnyxDownstreamCampaign\CampaignStatus;

/**
 * Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service.
 *
 * @phpstan-type telnyx_downstream_campaign = array{
 *   tcrBrandID: string,
 *   tcrCampaignID: string,
 *   ageGated?: bool,
 *   assignedPhoneNumbersCount?: float,
 *   brandDisplayName?: string,
 *   campaignStatus?: value-of<CampaignStatus>,
 *   createdAt?: string,
 *   description?: string,
 *   directLending?: bool,
 *   embeddedLink?: bool,
 *   embeddedLinkSample?: string,
 *   embeddedPhone?: bool,
 *   failureReasons?: string,
 *   helpKeywords?: string,
 *   helpMessage?: string,
 *   isNumberPoolingEnabled?: bool,
 *   messageFlow?: string,
 *   numberPool?: bool,
 *   optinKeywords?: string,
 *   optinMessage?: string,
 *   optoutKeywords?: string,
 *   optoutMessage?: string,
 *   privacyPolicyLink?: string,
 *   sample1?: string,
 *   sample2?: string,
 *   sample3?: string,
 *   sample4?: string,
 *   sample5?: string,
 *   subscriberOptin?: bool,
 *   subscriberOptout?: bool,
 *   subUsecases?: list<string>,
 *   termsAndConditions?: bool,
 *   termsAndConditionsLink?: string,
 *   updatedAt?: string,
 *   usecase?: string,
 *   webhookFailoverURL?: string,
 *   webhookURL?: string,
 * }
 * When used in a response, this type parameter can be used to define a $rawResponse property.
 * @template TRawResponse of object = object{}
 *
 * @mixin TRawResponse
 */
final class TelnyxDownstreamCampaign implements BaseModel
{
    /** @use SdkModel<telnyx_downstream_campaign> */
    use SdkModel;

    /**
     * Unique identifier assigned to the brand by the registry.
     */
    #[Api('tcrBrandId')]
    public string $tcrBrandID;

    /**
     * Unique identifier assigned to the campaign by the registry.
     */
    #[Api('tcrCampaignId')]
    public string $tcrCampaignID;

    /**
     * Age gated content in campaign.
     */
    #[Api(optional: true)]
    public ?bool $ageGated;

    /**
     * Number of phone numbers associated with the campaign.
     */
    #[Api(optional: true)]
    public ?float $assignedPhoneNumbersCount;

    /**
     * Display or marketing name of the brand.
     */
    #[Api(optional: true)]
    public ?string $brandDisplayName;

    /**
     * Campaign status.
     *
     * @var value-of<CampaignStatus>|null $campaignStatus
     */
    #[Api(enum: CampaignStatus::class, optional: true)]
    public ?string $campaignStatus;

    /**
     * Date and time that the brand was created at.
     */
    #[Api(optional: true)]
    public ?string $createdAt;

    /**
     * Summary description of this campaign.
     */
    #[Api(optional: true)]
    public ?string $description;

    /**
     * Direct lending or loan arrangement.
     */
    #[Api(optional: true)]
    public ?bool $directLending;

    /**
     * Does message generated by the campaign include URL link in SMS?
     */
    #[Api(optional: true)]
    public ?bool $embeddedLink;

    /**
     * Sample of an embedded link that will be sent to subscribers.
     */
    #[Api(optional: true)]
    public ?string $embeddedLinkSample;

    /**
     * Does message generated by the campaign include phone number in SMS?
     */
    #[Api(optional: true)]
    public ?bool $embeddedPhone;

    /**
     * Failure reasons if campaign submission failed.
     */
    #[Api(optional: true)]
    public ?string $failureReasons;

    /**
     * Subscriber help keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $helpKeywords;

    /**
     * Help message of the campaign.
     */
    #[Api(optional: true)]
    public ?string $helpMessage;

    /**
     * Indicates whether the campaign has a T-Mobile number pool ID associated with it.
     */
    #[Api(optional: true)]
    public ?bool $isNumberPoolingEnabled;

    /**
     * Message flow description.
     */
    #[Api(optional: true)]
    public ?string $messageFlow;

    /**
     * Does campaign utilize pool of phone numbers?
     */
    #[Api(optional: true)]
    public ?bool $numberPool;

    /**
     * Subscriber opt-in keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $optinKeywords;

    /**
     * Subscriber opt-in message.
     */
    #[Api(optional: true)]
    public ?string $optinMessage;

    /**
     * Subscriber opt-out keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $optoutKeywords;

    /**
     * Subscriber opt-out message.
     */
    #[Api(optional: true)]
    public ?string $optoutMessage;

    /**
     * Link to the campaign's privacy policy.
     */
    #[Api(optional: true)]
    public ?string $privacyPolicyLink;

    /**
     * Message sample. Some campaign tiers require 1 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample1;

    /**
     * Message sample. Some campaign tiers require 2 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample2;

    /**
     * Message sample. Some campaign tiers require 3 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample3;

    /**
     * Message sample. Some campaign tiers require 4 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample4;

    /**
     * Message sample. Some campaign tiers require 5 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample5;

    /**
     * Does campaign require subscriber to opt-in before SMS is sent to subscriber?
     */
    #[Api(optional: true)]
    public ?bool $subscriberOptin;

    /**
     * Does campaign support subscriber opt-out keyword(s)?
     */
    #[Api(optional: true)]
    public ?bool $subscriberOptout;

    /**
     * Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases.
     *
     * @var list<string>|null $subUsecases
     */
    #[Api(list: 'string', optional: true)]
    public ?array $subUsecases;

    /**
     * Is terms & conditions accepted?
     */
    #[Api(optional: true)]
    public ?bool $termsAndConditions;

    /**
     * Link to the campaign's terms and conditions.
     */
    #[Api(optional: true)]
    public ?string $termsAndConditionsLink;

    /**
     * Date and time that the brand was last updated at.
     */
    #[Api(optional: true)]
    public ?string $updatedAt;

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     */
    #[Api(optional: true)]
    public ?string $usecase;

    /**
     * Failover webhook to which campaign status updates are sent.
     */
    #[Api(optional: true)]
    public ?string $webhookFailoverURL;

    /**
     * Webhook to which campaign status updates are sent.
     */
    #[Api(optional: true)]
    public ?string $webhookURL;

    /**
     * `new TelnyxDownstreamCampaign()` is missing required properties by the API.
     *
     * To enforce required parameters use
     * ```
     * TelnyxDownstreamCampaign::with(tcrBrandID: ..., tcrCampaignID: ...)
     * ```
     *
     * Otherwise ensure the following setters are called
     *
     * ```
     * (new TelnyxDownstreamCampaign)->withTcrBrandID(...)->withTcrCampaignID(...)
     * ```
     */
    public function __construct()
    {
        $this->initialize();
    }

    /**
     * Construct an instance from the required parameters.
     *
     * You must use named parameters to construct any parameters with a default value.
     *
     * @param CampaignStatus|value-of<CampaignStatus> $campaignStatus
     * @param list<string> $subUsecases
     */
    public static function with(
        string $tcrBrandID,
        string $tcrCampaignID,
        ?bool $ageGated = null,
        ?float $assignedPhoneNumbersCount = null,
        ?string $brandDisplayName = null,
        CampaignStatus|string|null $campaignStatus = null,
        ?string $createdAt = null,
        ?string $description = null,
        ?bool $directLending = null,
        ?bool $embeddedLink = null,
        ?string $embeddedLinkSample = null,
        ?bool $embeddedPhone = null,
        ?string $failureReasons = null,
        ?string $helpKeywords = null,
        ?string $helpMessage = null,
        ?bool $isNumberPoolingEnabled = null,
        ?string $messageFlow = null,
        ?bool $numberPool = null,
        ?string $optinKeywords = null,
        ?string $optinMessage = null,
        ?string $optoutKeywords = null,
        ?string $optoutMessage = null,
        ?string $privacyPolicyLink = null,
        ?string $sample1 = null,
        ?string $sample2 = null,
        ?string $sample3 = null,
        ?string $sample4 = null,
        ?string $sample5 = null,
        ?bool $subscriberOptin = null,
        ?bool $subscriberOptout = null,
        ?array $subUsecases = null,
        ?bool $termsAndConditions = null,
        ?string $termsAndConditionsLink = null,
        ?string $updatedAt = null,
        ?string $usecase = null,
        ?string $webhookFailoverURL = null,
        ?string $webhookURL = null,
    ): self {
        $obj = new self;

        $obj->tcrBrandID = $tcrBrandID;
        $obj->tcrCampaignID = $tcrCampaignID;

        null !== $ageGated && $obj->ageGated = $ageGated;
        null !== $assignedPhoneNumbersCount && $obj->assignedPhoneNumbersCount = $assignedPhoneNumbersCount;
        null !== $brandDisplayName && $obj->brandDisplayName = $brandDisplayName;
        null !== $campaignStatus && $obj->campaignStatus = $campaignStatus instanceof CampaignStatus ? $campaignStatus->value : $campaignStatus;
        null !== $createdAt && $obj->createdAt = $createdAt;
        null !== $description && $obj->description = $description;
        null !== $directLending && $obj->directLending = $directLending;
        null !== $embeddedLink && $obj->embeddedLink = $embeddedLink;
        null !== $embeddedLinkSample && $obj->embeddedLinkSample = $embeddedLinkSample;
        null !== $embeddedPhone && $obj->embeddedPhone = $embeddedPhone;
        null !== $failureReasons && $obj->failureReasons = $failureReasons;
        null !== $helpKeywords && $obj->helpKeywords = $helpKeywords;
        null !== $helpMessage && $obj->helpMessage = $helpMessage;
        null !== $isNumberPoolingEnabled && $obj->isNumberPoolingEnabled = $isNumberPoolingEnabled;
        null !== $messageFlow && $obj->messageFlow = $messageFlow;
        null !== $numberPool && $obj->numberPool = $numberPool;
        null !== $optinKeywords && $obj->optinKeywords = $optinKeywords;
        null !== $optinMessage && $obj->optinMessage = $optinMessage;
        null !== $optoutKeywords && $obj->optoutKeywords = $optoutKeywords;
        null !== $optoutMessage && $obj->optoutMessage = $optoutMessage;
        null !== $privacyPolicyLink && $obj->privacyPolicyLink = $privacyPolicyLink;
        null !== $sample1 && $obj->sample1 = $sample1;
        null !== $sample2 && $obj->sample2 = $sample2;
        null !== $sample3 && $obj->sample3 = $sample3;
        null !== $sample4 && $obj->sample4 = $sample4;
        null !== $sample5 && $obj->sample5 = $sample5;
        null !== $subscriberOptin && $obj->subscriberOptin = $subscriberOptin;
        null !== $subscriberOptout && $obj->subscriberOptout = $subscriberOptout;
        null !== $subUsecases && $obj->subUsecases = $subUsecases;
        null !== $termsAndConditions && $obj->termsAndConditions = $termsAndConditions;
        null !== $termsAndConditionsLink && $obj->termsAndConditionsLink = $termsAndConditionsLink;
        null !== $updatedAt && $obj->updatedAt = $updatedAt;
        null !== $usecase && $obj->usecase = $usecase;
        null !== $webhookFailoverURL && $obj->webhookFailoverURL = $webhookFailoverURL;
        null !== $webhookURL && $obj->webhookURL = $webhookURL;

        return $obj;
    }

    /**
     * Unique identifier assigned to the brand by the registry.
     */
    public function withTcrBrandID(string $tcrBrandID): self
    {
        $obj = clone $this;
        $obj->tcrBrandID = $tcrBrandID;

        return $obj;
    }

    /**
     * Unique identifier assigned to the campaign by the registry.
     */
    public function withTcrCampaignID(string $tcrCampaignID): self
    {
        $obj = clone $this;
        $obj->tcrCampaignID = $tcrCampaignID;

        return $obj;
    }

    /**
     * Age gated content in campaign.
     */
    public function withAgeGated(bool $ageGated): self
    {
        $obj = clone $this;
        $obj->ageGated = $ageGated;

        return $obj;
    }

    /**
     * Number of phone numbers associated with the campaign.
     */
    public function withAssignedPhoneNumbersCount(
        float $assignedPhoneNumbersCount
    ): self {
        $obj = clone $this;
        $obj->assignedPhoneNumbersCount = $assignedPhoneNumbersCount;

        return $obj;
    }

    /**
     * Display or marketing name of the brand.
     */
    public function withBrandDisplayName(string $brandDisplayName): self
    {
        $obj = clone $this;
        $obj->brandDisplayName = $brandDisplayName;

        return $obj;
    }

    /**
     * Campaign status.
     *
     * @param CampaignStatus|value-of<CampaignStatus> $campaignStatus
     */
    public function withCampaignStatus(
        CampaignStatus|string $campaignStatus
    ): self {
        $obj = clone $this;
        $obj->campaignStatus = $campaignStatus instanceof CampaignStatus ? $campaignStatus->value : $campaignStatus;

        return $obj;
    }

    /**
     * Date and time that the brand was created at.
     */
    public function withCreatedAt(string $createdAt): self
    {
        $obj = clone $this;
        $obj->createdAt = $createdAt;

        return $obj;
    }

    /**
     * Summary description of this campaign.
     */
    public function withDescription(string $description): self
    {
        $obj = clone $this;
        $obj->description = $description;

        return $obj;
    }

    /**
     * Direct lending or loan arrangement.
     */
    public function withDirectLending(bool $directLending): self
    {
        $obj = clone $this;
        $obj->directLending = $directLending;

        return $obj;
    }

    /**
     * Does message generated by the campaign include URL link in SMS?
     */
    public function withEmbeddedLink(bool $embeddedLink): self
    {
        $obj = clone $this;
        $obj->embeddedLink = $embeddedLink;

        return $obj;
    }

    /**
     * Sample of an embedded link that will be sent to subscribers.
     */
    public function withEmbeddedLinkSample(string $embeddedLinkSample): self
    {
        $obj = clone $this;
        $obj->embeddedLinkSample = $embeddedLinkSample;

        return $obj;
    }

    /**
     * Does message generated by the campaign include phone number in SMS?
     */
    public function withEmbeddedPhone(bool $embeddedPhone): self
    {
        $obj = clone $this;
        $obj->embeddedPhone = $embeddedPhone;

        return $obj;
    }

    /**
     * Failure reasons if campaign submission failed.
     */
    public function withFailureReasons(string $failureReasons): self
    {
        $obj = clone $this;
        $obj->failureReasons = $failureReasons;

        return $obj;
    }

    /**
     * Subscriber help keywords. Multiple keywords are comma separated without space.
     */
    public function withHelpKeywords(string $helpKeywords): self
    {
        $obj = clone $this;
        $obj->helpKeywords = $helpKeywords;

        return $obj;
    }

    /**
     * Help message of the campaign.
     */
    public function withHelpMessage(string $helpMessage): self
    {
        $obj = clone $this;
        $obj->helpMessage = $helpMessage;

        return $obj;
    }

    /**
     * Indicates whether the campaign has a T-Mobile number pool ID associated with it.
     */
    public function withIsNumberPoolingEnabled(
        bool $isNumberPoolingEnabled
    ): self {
        $obj = clone $this;
        $obj->isNumberPoolingEnabled = $isNumberPoolingEnabled;

        return $obj;
    }

    /**
     * Message flow description.
     */
    public function withMessageFlow(string $messageFlow): self
    {
        $obj = clone $this;
        $obj->messageFlow = $messageFlow;

        return $obj;
    }

    /**
     * Does campaign utilize pool of phone numbers?
     */
    public function withNumberPool(bool $numberPool): self
    {
        $obj = clone $this;
        $obj->numberPool = $numberPool;

        return $obj;
    }

    /**
     * Subscriber opt-in keywords. Multiple keywords are comma separated without space.
     */
    public function withOptinKeywords(string $optinKeywords): self
    {
        $obj = clone $this;
        $obj->optinKeywords = $optinKeywords;

        return $obj;
    }

    /**
     * Subscriber opt-in message.
     */
    public function withOptinMessage(string $optinMessage): self
    {
        $obj = clone $this;
        $obj->optinMessage = $optinMessage;

        return $obj;
    }

    /**
     * Subscriber opt-out keywords. Multiple keywords are comma separated without space.
     */
    public function withOptoutKeywords(string $optoutKeywords): self
    {
        $obj = clone $this;
        $obj->optoutKeywords = $optoutKeywords;

        return $obj;
    }

    /**
     * Subscriber opt-out message.
     */
    public function withOptoutMessage(string $optoutMessage): self
    {
        $obj = clone $this;
        $obj->optoutMessage = $optoutMessage;

        return $obj;
    }

    /**
     * Link to the campaign's privacy policy.
     */
    public function withPrivacyPolicyLink(string $privacyPolicyLink): self
    {
        $obj = clone $this;
        $obj->privacyPolicyLink = $privacyPolicyLink;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 1 or more message samples.
     */
    public function withSample1(string $sample1): self
    {
        $obj = clone $this;
        $obj->sample1 = $sample1;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 2 or more message samples.
     */
    public function withSample2(string $sample2): self
    {
        $obj = clone $this;
        $obj->sample2 = $sample2;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 3 or more message samples.
     */
    public function withSample3(string $sample3): self
    {
        $obj = clone $this;
        $obj->sample3 = $sample3;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 4 or more message samples.
     */
    public function withSample4(string $sample4): self
    {
        $obj = clone $this;
        $obj->sample4 = $sample4;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 5 or more message samples.
     */
    public function withSample5(string $sample5): self
    {
        $obj = clone $this;
        $obj->sample5 = $sample5;

        return $obj;
    }

    /**
     * Does campaign require subscriber to opt-in before SMS is sent to subscriber?
     */
    public function withSubscriberOptin(bool $subscriberOptin): self
    {
        $obj = clone $this;
        $obj->subscriberOptin = $subscriberOptin;

        return $obj;
    }

    /**
     * Does campaign support subscriber opt-out keyword(s)?
     */
    public function withSubscriberOptout(bool $subscriberOptout): self
    {
        $obj = clone $this;
        $obj->subscriberOptout = $subscriberOptout;

        return $obj;
    }

    /**
     * Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases.
     *
     * @param list<string> $subUsecases
     */
    public function withSubUsecases(array $subUsecases): self
    {
        $obj = clone $this;
        $obj->subUsecases = $subUsecases;

        return $obj;
    }

    /**
     * Is terms & conditions accepted?
     */
    public function withTermsAndConditions(bool $termsAndConditions): self
    {
        $obj = clone $this;
        $obj->termsAndConditions = $termsAndConditions;

        return $obj;
    }

    /**
     * Link to the campaign's terms and conditions.
     */
    public function withTermsAndConditionsLink(
        string $termsAndConditionsLink
    ): self {
        $obj = clone $this;
        $obj->termsAndConditionsLink = $termsAndConditionsLink;

        return $obj;
    }

    /**
     * Date and time that the brand was last updated at.
     */
    public function withUpdatedAt(string $updatedAt): self
    {
        $obj = clone $this;
        $obj->updatedAt = $updatedAt;

        return $obj;
    }

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     */
    public function withUsecase(string $usecase): self
    {
        $obj = clone $this;
        $obj->usecase = $usecase;

        return $obj;
    }

    /**
     * Failover webhook to which campaign status updates are sent.
     */
    public function withWebhookFailoverURL(string $webhookFailoverURL): self
    {
        $obj = clone $this;
        $obj->webhookFailoverURL = $webhookFailoverURL;

        return $obj;
    }

    /**
     * Webhook to which campaign status updates are sent.
     */
    public function withWebhookURL(string $webhookURL): self
    {
        $obj = clone $this;
        $obj->webhookURL = $webhookURL;

        return $obj;
    }
}
