<?php

declare(strict_types=1);

namespace Telnyx\PartnerCampaigns\PartnerCampaignListSharedByMeResponse;

use Telnyx\Core\Attributes\Api;
use Telnyx\Core\Concerns\SdkModel;
use Telnyx\Core\Contracts\BaseModel;

/**
 * Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service. Most attributes of campaignare immutable, including **usecase**, **vertical**, **brandId** and **cspId**.
 *
 * @phpstan-type record_alias = array{
 *   brandID: string,
 *   campaignID: string,
 *   usecase: string,
 *   createDate?: string,
 *   status?: string,
 * }
 */
final class Record implements BaseModel
{
    /** @use SdkModel<record_alias> */
    use SdkModel;

    /**
     * Alphanumeric identifier of the brand associated with this campaign.
     */
    #[Api('brandId')]
    public string $brandID;

    /**
     * Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.
     */
    #[Api('campaignId')]
    public string $campaignID;

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     */
    #[Api]
    public string $usecase;

    /**
     * Unix timestamp when campaign was created.
     */
    #[Api(optional: true)]
    public ?string $createDate;

    /**
     * Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status.
     */
    #[Api(optional: true)]
    public ?string $status;

    /**
     * `new Record()` is missing required properties by the API.
     *
     * To enforce required parameters use
     * ```
     * Record::with(brandID: ..., campaignID: ..., usecase: ...)
     * ```
     *
     * Otherwise ensure the following setters are called
     *
     * ```
     * (new Record)->withBrandID(...)->withCampaignID(...)->withUsecase(...)
     * ```
     */
    public function __construct()
    {
        $this->initialize();
    }

    /**
     * Construct an instance from the required parameters.
     *
     * You must use named parameters to construct any parameters with a default value.
     */
    public static function with(
        string $brandID,
        string $campaignID,
        string $usecase,
        ?string $createDate = null,
        ?string $status = null,
    ): self {
        $obj = new self;

        $obj->brandID = $brandID;
        $obj->campaignID = $campaignID;
        $obj->usecase = $usecase;

        null !== $createDate && $obj->createDate = $createDate;
        null !== $status && $obj->status = $status;

        return $obj;
    }

    /**
     * Alphanumeric identifier of the brand associated with this campaign.
     */
    public function withBrandID(string $brandID): self
    {
        $obj = clone $this;
        $obj->brandID = $brandID;

        return $obj;
    }

    /**
     * Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.
     */
    public function withCampaignID(string $campaignID): self
    {
        $obj = clone $this;
        $obj->campaignID = $campaignID;

        return $obj;
    }

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     */
    public function withUsecase(string $usecase): self
    {
        $obj = clone $this;
        $obj->usecase = $usecase;

        return $obj;
    }

    /**
     * Unix timestamp when campaign was created.
     */
    public function withCreateDate(string $createDate): self
    {
        $obj = clone $this;
        $obj->createDate = $createDate;

        return $obj;
    }

    /**
     * Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status.
     */
    public function withStatus(string $status): self
    {
        $obj = clone $this;
        $obj->status = $status;

        return $obj;
    }
}
