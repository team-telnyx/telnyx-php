<?php

declare(strict_types=1);

namespace Telnyx\MessagingProfiles;

use Telnyx\Core\Attributes\Api;
use Telnyx\Core\Concerns\SdkModel;
use Telnyx\Core\Contracts\BaseModel;

/**
 * The URL shortener feature allows automatic replacement of URLs that were generated using
 * a public URL shortener service. Some examples include bit.do, bit.ly, goo.gl, ht.ly,
 * is.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com. Such URLs are replaced with
 * with links generated by Telnyx. The use of custom links can improve branding and message
 * deliverability.
 *
 * To disable this feature, set the object field to `null`.
 *
 * @phpstan-type url_shortener_settings = array{
 *   domain: string,
 *   prefix?: string|null,
 *   replaceBlacklistOnly?: bool|null,
 *   sendWebhooks?: bool|null,
 * }
 */
final class URLShortenerSettings implements BaseModel
{
    /** @use SdkModel<url_shortener_settings> */
    use SdkModel;

    /**
     * One of the domains provided by the Telnyx URL shortener service.
     */
    #[Api]
    public string $domain;

    /**
     * Optional prefix that can be used to identify your brand, and will appear in the Telnyx generated URLs after the domain name.
     */
    #[Api(optional: true)]
    public ?string $prefix;

    /**
     * Use the link replacement tool only for links that are specifically blacklisted by Telnyx.
     */
    #[Api('replace_blacklist_only', optional: true)]
    public ?bool $replaceBlacklistOnly;

    /**
     * Receive webhooks for when your replaced links are clicked. Webhooks are sent to the webhooks on the messaging profile.
     */
    #[Api('send_webhooks', optional: true)]
    public ?bool $sendWebhooks;

    /**
     * `new URLShortenerSettings()` is missing required properties by the API.
     *
     * To enforce required parameters use
     * ```
     * URLShortenerSettings::with(domain: ...)
     * ```
     *
     * Otherwise ensure the following setters are called
     *
     * ```
     * (new URLShortenerSettings)->withDomain(...)
     * ```
     */
    public function __construct()
    {
        $this->initialize();
    }

    /**
     * Construct an instance from the required parameters.
     *
     * You must use named parameters to construct any parameters with a default value.
     */
    public static function with(
        string $domain,
        ?string $prefix = null,
        ?bool $replaceBlacklistOnly = null,
        ?bool $sendWebhooks = null,
    ): self {
        $obj = new self;

        $obj->domain = $domain;

        null !== $prefix && $obj->prefix = $prefix;
        null !== $replaceBlacklistOnly && $obj->replaceBlacklistOnly = $replaceBlacklistOnly;
        null !== $sendWebhooks && $obj->sendWebhooks = $sendWebhooks;

        return $obj;
    }

    /**
     * One of the domains provided by the Telnyx URL shortener service.
     */
    public function withDomain(string $domain): self
    {
        $obj = clone $this;
        $obj->domain = $domain;

        return $obj;
    }

    /**
     * Optional prefix that can be used to identify your brand, and will appear in the Telnyx generated URLs after the domain name.
     */
    public function withPrefix(string $prefix): self
    {
        $obj = clone $this;
        $obj->prefix = $prefix;

        return $obj;
    }

    /**
     * Use the link replacement tool only for links that are specifically blacklisted by Telnyx.
     */
    public function withReplaceBlacklistOnly(bool $replaceBlacklistOnly): self
    {
        $obj = clone $this;
        $obj->replaceBlacklistOnly = $replaceBlacklistOnly;

        return $obj;
    }

    /**
     * Receive webhooks for when your replaced links are clicked. Webhooks are sent to the webhooks on the messaging profile.
     */
    public function withSendWebhooks(bool $sendWebhooks): self
    {
        $obj = clone $this;
        $obj->sendWebhooks = $sendWebhooks;

        return $obj;
    }
}
