<?php

declare(strict_types=1);

namespace Telnyx\Campaign;

use Telnyx\Campaign\TelnyxCampaignCsp\CampaignStatus;
use Telnyx\Campaign\TelnyxCampaignCsp\SubmissionStatus;
use Telnyx\Core\Attributes\Api;
use Telnyx\Core\Concerns\SdkModel;
use Telnyx\Core\Contracts\BaseModel;

/**
 * Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service. Most attributes of campaignare immutable, including **usecase**, **vertical**, **brandId** and **cspId**.
 *
 * @phpstan-type telnyx_campaign_csp = array{
 *   brandID: string,
 *   campaignID: string,
 *   cspID: string,
 *   description: string,
 *   mock: bool,
 *   subUsecases: list<string>,
 *   termsAndConditions: bool,
 *   usecase: string,
 *   ageGated?: bool|null,
 *   autoRenewal?: bool|null,
 *   billedDate?: string|null,
 *   brandDisplayName?: string|null,
 *   campaignStatus?: value-of<CampaignStatus>|null,
 *   createDate?: string|null,
 *   directLending?: bool|null,
 *   embeddedLink?: bool|null,
 *   embeddedLinkSample?: string|null,
 *   embeddedPhone?: bool|null,
 *   failureReasons?: string|null,
 *   helpKeywords?: string|null,
 *   helpMessage?: string|null,
 *   isTMobileNumberPoolingEnabled?: bool|null,
 *   isTMobileRegistered?: bool|null,
 *   isTMobileSuspended?: bool|null,
 *   messageFlow?: string|null,
 *   nextRenewalOrExpirationDate?: string|null,
 *   numberPool?: bool|null,
 *   optinKeywords?: string|null,
 *   optinMessage?: string|null,
 *   optoutKeywords?: string|null,
 *   optoutMessage?: string|null,
 *   privacyPolicyLink?: string|null,
 *   referenceID?: string|null,
 *   resellerID?: string|null,
 *   sample1?: string|null,
 *   sample2?: string|null,
 *   sample3?: string|null,
 *   sample4?: string|null,
 *   sample5?: string|null,
 *   status?: string|null,
 *   submissionStatus?: value-of<SubmissionStatus>|null,
 *   subscriberHelp?: bool|null,
 *   subscriberOptin?: bool|null,
 *   subscriberOptout?: bool|null,
 *   tcrBrandID?: string|null,
 *   tcrCampaignID?: string|null,
 *   termsAndConditionsLink?: string|null,
 *   vertical?: string|null,
 *   webhookFailoverURL?: string|null,
 *   webhookURL?: string|null,
 * }
 */
final class TelnyxCampaignCsp implements BaseModel
{
    /** @use SdkModel<telnyx_campaign_csp> */
    use SdkModel;

    /**
     * Unique identifier assigned to the brand.
     */
    #[Api('brandId')]
    public string $brandID;

    /**
     * Unique identifier for a campaign.
     */
    #[Api('campaignId')]
    public string $campaignID;

    /**
     * Alphanumeric identifier of the CSP associated with this campaign.
     */
    #[Api('cspId')]
    public string $cspID;

    /**
     * Summary description of this campaign.
     */
    #[Api]
    public string $description;

    /**
     * Campaign created from mock brand. Mocked campaign cannot be shared with an upstream CNP.
     */
    #[Api]
    public bool $mock;

    /**
     * Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases.
     *
     * @var list<string> $subUsecases
     */
    #[Api(list: 'string')]
    public array $subUsecases;

    /**
     * Is terms & conditions accepted?
     */
    #[Api]
    public bool $termsAndConditions;

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     */
    #[Api]
    public string $usecase;

    /**
     * Age gated content in campaign.
     */
    #[Api(optional: true)]
    public ?bool $ageGated;

    /**
     * Campaign subscription auto-renewal status.
     */
    #[Api(optional: true)]
    public ?bool $autoRenewal;

    /**
     * Campaign recent billed date.
     */
    #[Api(optional: true)]
    public ?string $billedDate;

    /**
     * Display or marketing name of the brand.
     */
    #[Api(optional: true)]
    public ?string $brandDisplayName;

    /**
     * Campaign status.
     *
     * @var value-of<CampaignStatus>|null $campaignStatus
     */
    #[Api(enum: CampaignStatus::class, optional: true)]
    public ?string $campaignStatus;

    /**
     * Unix timestamp when campaign was created.
     */
    #[Api(optional: true)]
    public ?string $createDate;

    #[Api(optional: true)]
    public ?bool $directLending;

    /**
     * Does message generated by the campaign include URL link in SMS?
     */
    #[Api(optional: true)]
    public ?bool $embeddedLink;

    /**
     * Sample of an embedded link that will be sent to subscribers.
     */
    #[Api(optional: true)]
    public ?string $embeddedLinkSample;

    /**
     * Does message generated by the campaign include phone number in SMS?
     */
    #[Api(optional: true)]
    public ?bool $embeddedPhone;

    /**
     * Failure reasons if campaign submission failed.
     */
    #[Api(optional: true)]
    public ?string $failureReasons;

    /**
     * Subscriber help keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $helpKeywords;

    /**
     * Help message of the campaign.
     */
    #[Api(optional: true)]
    public ?string $helpMessage;

    /**
     * Indicates whether the campaign has a T-Mobile number pool ID associated with it.
     */
    #[Api(optional: true)]
    public ?bool $isTMobileNumberPoolingEnabled;

    /**
     * Indicates whether the campaign is registered with T-Mobile.
     */
    #[Api(optional: true)]
    public ?bool $isTMobileRegistered;

    /**
     * Indicates whether the campaign is suspended with T-Mobile.
     */
    #[Api(optional: true)]
    public ?bool $isTMobileSuspended;

    /**
     * Message flow description.
     */
    #[Api(optional: true)]
    public ?string $messageFlow;

    /**
     * When the campaign would be due for its next renew/bill date.
     */
    #[Api(optional: true)]
    public ?string $nextRenewalOrExpirationDate;

    /**
     * Does campaign utilize pool of phone numbers?
     */
    #[Api(optional: true)]
    public ?bool $numberPool;

    /**
     * Subscriber opt-in keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $optinKeywords;

    /**
     * Subscriber opt-in message.
     */
    #[Api(optional: true)]
    public ?string $optinMessage;

    /**
     * Subscriber opt-out keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $optoutKeywords;

    /**
     * Subscriber opt-out message.
     */
    #[Api(optional: true)]
    public ?string $optoutMessage;

    /**
     * Link to the campaign's privacy policy.
     */
    #[Api(optional: true)]
    public ?string $privacyPolicyLink;

    /**
     * Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations.
     */
    #[Api('referenceId', optional: true)]
    public ?string $referenceID;

    /**
     * Alphanumeric identifier of the reseller that you want to associate with this campaign.
     */
    #[Api('resellerId', optional: true)]
    public ?string $resellerID;

    /**
     * Message sample. Some campaign tiers require 1 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample1;

    /**
     * Message sample. Some campaign tiers require 2 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample2;

    /**
     * Message sample. Some campaign tiers require 3 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample3;

    /**
     * Message sample. Some campaign tiers require 4 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample4;

    /**
     * Message sample. Some campaign tiers require 5 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample5;

    /**
     * Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status.
     */
    #[Api(optional: true)]
    public ?string $status;

    /**
     * Campaign submission status.
     *
     * @var value-of<SubmissionStatus>|null $submissionStatus
     */
    #[Api(enum: SubmissionStatus::class, optional: true)]
    public ?string $submissionStatus;

    /**
     * Does campaign responds to help keyword(s)?
     */
    #[Api(optional: true)]
    public ?bool $subscriberHelp;

    /**
     * Does campaign require subscriber to opt-in before SMS is sent to subscriber?
     */
    #[Api(optional: true)]
    public ?bool $subscriberOptin;

    /**
     * Does campaign support subscriber opt-out keyword(s)?
     */
    #[Api(optional: true)]
    public ?bool $subscriberOptout;

    /**
     * Unique identifier assigned to the brand by the registry.
     */
    #[Api('tcrBrandId', optional: true)]
    public ?string $tcrBrandID;

    /**
     * Unique identifier assigned to the campaign by the registry.
     */
    #[Api('tcrCampaignId', optional: true)]
    public ?string $tcrCampaignID;

    /**
     * Link to the campaign's terms and conditions.
     */
    #[Api(optional: true)]
    public ?string $termsAndConditionsLink;

    /**
     * @deprecated
     *
     * Business/industry segment of this campaign (Deprecated). Must be of defined valid types. Use `/registry/enum/vertical` operation to retrieve verticals available for given brand, vertical combination.
     *
     * This field is deprecated.
     */
    #[Api(optional: true)]
    public ?string $vertical;

    /**
     * Failover webhook to which campaign status updates are sent.
     */
    #[Api(optional: true)]
    public ?string $webhookFailoverURL;

    /**
     * Webhook to which campaign status updates are sent.
     */
    #[Api(optional: true)]
    public ?string $webhookURL;

    /**
     * `new TelnyxCampaignCsp()` is missing required properties by the API.
     *
     * To enforce required parameters use
     * ```
     * TelnyxCampaignCsp::with(
     *   brandID: ...,
     *   campaignID: ...,
     *   cspID: ...,
     *   description: ...,
     *   mock: ...,
     *   subUsecases: ...,
     *   termsAndConditions: ...,
     *   usecase: ...,
     * )
     * ```
     *
     * Otherwise ensure the following setters are called
     *
     * ```
     * (new TelnyxCampaignCsp)
     *   ->withBrandID(...)
     *   ->withCampaignID(...)
     *   ->withCspID(...)
     *   ->withDescription(...)
     *   ->withMock(...)
     *   ->withSubUsecases(...)
     *   ->withTermsAndConditions(...)
     *   ->withUsecase(...)
     * ```
     */
    public function __construct()
    {
        $this->initialize();
    }

    /**
     * Construct an instance from the required parameters.
     *
     * You must use named parameters to construct any parameters with a default value.
     *
     * @param list<string> $subUsecases
     * @param CampaignStatus|value-of<CampaignStatus> $campaignStatus
     * @param SubmissionStatus|value-of<SubmissionStatus> $submissionStatus
     */
    public static function with(
        string $brandID,
        string $campaignID,
        string $cspID,
        string $description,
        bool $mock,
        array $subUsecases,
        bool $termsAndConditions,
        string $usecase,
        ?bool $ageGated = null,
        ?bool $autoRenewal = null,
        ?string $billedDate = null,
        ?string $brandDisplayName = null,
        CampaignStatus|string|null $campaignStatus = null,
        ?string $createDate = null,
        ?bool $directLending = null,
        ?bool $embeddedLink = null,
        ?string $embeddedLinkSample = null,
        ?bool $embeddedPhone = null,
        ?string $failureReasons = null,
        ?string $helpKeywords = null,
        ?string $helpMessage = null,
        ?bool $isTMobileNumberPoolingEnabled = null,
        ?bool $isTMobileRegistered = null,
        ?bool $isTMobileSuspended = null,
        ?string $messageFlow = null,
        ?string $nextRenewalOrExpirationDate = null,
        ?bool $numberPool = null,
        ?string $optinKeywords = null,
        ?string $optinMessage = null,
        ?string $optoutKeywords = null,
        ?string $optoutMessage = null,
        ?string $privacyPolicyLink = null,
        ?string $referenceID = null,
        ?string $resellerID = null,
        ?string $sample1 = null,
        ?string $sample2 = null,
        ?string $sample3 = null,
        ?string $sample4 = null,
        ?string $sample5 = null,
        ?string $status = null,
        SubmissionStatus|string|null $submissionStatus = null,
        ?bool $subscriberHelp = null,
        ?bool $subscriberOptin = null,
        ?bool $subscriberOptout = null,
        ?string $tcrBrandID = null,
        ?string $tcrCampaignID = null,
        ?string $termsAndConditionsLink = null,
        ?string $vertical = null,
        ?string $webhookFailoverURL = null,
        ?string $webhookURL = null,
    ): self {
        $obj = new self;

        $obj->brandID = $brandID;
        $obj->campaignID = $campaignID;
        $obj->cspID = $cspID;
        $obj->description = $description;
        $obj->mock = $mock;
        $obj->subUsecases = $subUsecases;
        $obj->termsAndConditions = $termsAndConditions;
        $obj->usecase = $usecase;

        null !== $ageGated && $obj->ageGated = $ageGated;
        null !== $autoRenewal && $obj->autoRenewal = $autoRenewal;
        null !== $billedDate && $obj->billedDate = $billedDate;
        null !== $brandDisplayName && $obj->brandDisplayName = $brandDisplayName;
        null !== $campaignStatus && $obj->campaignStatus = $campaignStatus instanceof CampaignStatus ? $campaignStatus->value : $campaignStatus;
        null !== $createDate && $obj->createDate = $createDate;
        null !== $directLending && $obj->directLending = $directLending;
        null !== $embeddedLink && $obj->embeddedLink = $embeddedLink;
        null !== $embeddedLinkSample && $obj->embeddedLinkSample = $embeddedLinkSample;
        null !== $embeddedPhone && $obj->embeddedPhone = $embeddedPhone;
        null !== $failureReasons && $obj->failureReasons = $failureReasons;
        null !== $helpKeywords && $obj->helpKeywords = $helpKeywords;
        null !== $helpMessage && $obj->helpMessage = $helpMessage;
        null !== $isTMobileNumberPoolingEnabled && $obj->isTMobileNumberPoolingEnabled = $isTMobileNumberPoolingEnabled;
        null !== $isTMobileRegistered && $obj->isTMobileRegistered = $isTMobileRegistered;
        null !== $isTMobileSuspended && $obj->isTMobileSuspended = $isTMobileSuspended;
        null !== $messageFlow && $obj->messageFlow = $messageFlow;
        null !== $nextRenewalOrExpirationDate && $obj->nextRenewalOrExpirationDate = $nextRenewalOrExpirationDate;
        null !== $numberPool && $obj->numberPool = $numberPool;
        null !== $optinKeywords && $obj->optinKeywords = $optinKeywords;
        null !== $optinMessage && $obj->optinMessage = $optinMessage;
        null !== $optoutKeywords && $obj->optoutKeywords = $optoutKeywords;
        null !== $optoutMessage && $obj->optoutMessage = $optoutMessage;
        null !== $privacyPolicyLink && $obj->privacyPolicyLink = $privacyPolicyLink;
        null !== $referenceID && $obj->referenceID = $referenceID;
        null !== $resellerID && $obj->resellerID = $resellerID;
        null !== $sample1 && $obj->sample1 = $sample1;
        null !== $sample2 && $obj->sample2 = $sample2;
        null !== $sample3 && $obj->sample3 = $sample3;
        null !== $sample4 && $obj->sample4 = $sample4;
        null !== $sample5 && $obj->sample5 = $sample5;
        null !== $status && $obj->status = $status;
        null !== $submissionStatus && $obj->submissionStatus = $submissionStatus instanceof SubmissionStatus ? $submissionStatus->value : $submissionStatus;
        null !== $subscriberHelp && $obj->subscriberHelp = $subscriberHelp;
        null !== $subscriberOptin && $obj->subscriberOptin = $subscriberOptin;
        null !== $subscriberOptout && $obj->subscriberOptout = $subscriberOptout;
        null !== $tcrBrandID && $obj->tcrBrandID = $tcrBrandID;
        null !== $tcrCampaignID && $obj->tcrCampaignID = $tcrCampaignID;
        null !== $termsAndConditionsLink && $obj->termsAndConditionsLink = $termsAndConditionsLink;
        null !== $vertical && $obj->vertical = $vertical;
        null !== $webhookFailoverURL && $obj->webhookFailoverURL = $webhookFailoverURL;
        null !== $webhookURL && $obj->webhookURL = $webhookURL;

        return $obj;
    }

    /**
     * Unique identifier assigned to the brand.
     */
    public function withBrandID(string $brandID): self
    {
        $obj = clone $this;
        $obj->brandID = $brandID;

        return $obj;
    }

    /**
     * Unique identifier for a campaign.
     */
    public function withCampaignID(string $campaignID): self
    {
        $obj = clone $this;
        $obj->campaignID = $campaignID;

        return $obj;
    }

    /**
     * Alphanumeric identifier of the CSP associated with this campaign.
     */
    public function withCspID(string $cspID): self
    {
        $obj = clone $this;
        $obj->cspID = $cspID;

        return $obj;
    }

    /**
     * Summary description of this campaign.
     */
    public function withDescription(string $description): self
    {
        $obj = clone $this;
        $obj->description = $description;

        return $obj;
    }

    /**
     * Campaign created from mock brand. Mocked campaign cannot be shared with an upstream CNP.
     */
    public function withMock(bool $mock): self
    {
        $obj = clone $this;
        $obj->mock = $mock;

        return $obj;
    }

    /**
     * Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases.
     *
     * @param list<string> $subUsecases
     */
    public function withSubUsecases(array $subUsecases): self
    {
        $obj = clone $this;
        $obj->subUsecases = $subUsecases;

        return $obj;
    }

    /**
     * Is terms & conditions accepted?
     */
    public function withTermsAndConditions(bool $termsAndConditions): self
    {
        $obj = clone $this;
        $obj->termsAndConditions = $termsAndConditions;

        return $obj;
    }

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     */
    public function withUsecase(string $usecase): self
    {
        $obj = clone $this;
        $obj->usecase = $usecase;

        return $obj;
    }

    /**
     * Age gated content in campaign.
     */
    public function withAgeGated(bool $ageGated): self
    {
        $obj = clone $this;
        $obj->ageGated = $ageGated;

        return $obj;
    }

    /**
     * Campaign subscription auto-renewal status.
     */
    public function withAutoRenewal(bool $autoRenewal): self
    {
        $obj = clone $this;
        $obj->autoRenewal = $autoRenewal;

        return $obj;
    }

    /**
     * Campaign recent billed date.
     */
    public function withBilledDate(string $billedDate): self
    {
        $obj = clone $this;
        $obj->billedDate = $billedDate;

        return $obj;
    }

    /**
     * Display or marketing name of the brand.
     */
    public function withBrandDisplayName(string $brandDisplayName): self
    {
        $obj = clone $this;
        $obj->brandDisplayName = $brandDisplayName;

        return $obj;
    }

    /**
     * Campaign status.
     *
     * @param CampaignStatus|value-of<CampaignStatus> $campaignStatus
     */
    public function withCampaignStatus(
        CampaignStatus|string $campaignStatus
    ): self {
        $obj = clone $this;
        $obj->campaignStatus = $campaignStatus instanceof CampaignStatus ? $campaignStatus->value : $campaignStatus;

        return $obj;
    }

    /**
     * Unix timestamp when campaign was created.
     */
    public function withCreateDate(string $createDate): self
    {
        $obj = clone $this;
        $obj->createDate = $createDate;

        return $obj;
    }

    public function withDirectLending(bool $directLending): self
    {
        $obj = clone $this;
        $obj->directLending = $directLending;

        return $obj;
    }

    /**
     * Does message generated by the campaign include URL link in SMS?
     */
    public function withEmbeddedLink(bool $embeddedLink): self
    {
        $obj = clone $this;
        $obj->embeddedLink = $embeddedLink;

        return $obj;
    }

    /**
     * Sample of an embedded link that will be sent to subscribers.
     */
    public function withEmbeddedLinkSample(string $embeddedLinkSample): self
    {
        $obj = clone $this;
        $obj->embeddedLinkSample = $embeddedLinkSample;

        return $obj;
    }

    /**
     * Does message generated by the campaign include phone number in SMS?
     */
    public function withEmbeddedPhone(bool $embeddedPhone): self
    {
        $obj = clone $this;
        $obj->embeddedPhone = $embeddedPhone;

        return $obj;
    }

    /**
     * Failure reasons if campaign submission failed.
     */
    public function withFailureReasons(string $failureReasons): self
    {
        $obj = clone $this;
        $obj->failureReasons = $failureReasons;

        return $obj;
    }

    /**
     * Subscriber help keywords. Multiple keywords are comma separated without space.
     */
    public function withHelpKeywords(string $helpKeywords): self
    {
        $obj = clone $this;
        $obj->helpKeywords = $helpKeywords;

        return $obj;
    }

    /**
     * Help message of the campaign.
     */
    public function withHelpMessage(string $helpMessage): self
    {
        $obj = clone $this;
        $obj->helpMessage = $helpMessage;

        return $obj;
    }

    /**
     * Indicates whether the campaign has a T-Mobile number pool ID associated with it.
     */
    public function withIsTMobileNumberPoolingEnabled(
        bool $isTMobileNumberPoolingEnabled
    ): self {
        $obj = clone $this;
        $obj->isTMobileNumberPoolingEnabled = $isTMobileNumberPoolingEnabled;

        return $obj;
    }

    /**
     * Indicates whether the campaign is registered with T-Mobile.
     */
    public function withIsTMobileRegistered(bool $isTMobileRegistered): self
    {
        $obj = clone $this;
        $obj->isTMobileRegistered = $isTMobileRegistered;

        return $obj;
    }

    /**
     * Indicates whether the campaign is suspended with T-Mobile.
     */
    public function withIsTMobileSuspended(bool $isTMobileSuspended): self
    {
        $obj = clone $this;
        $obj->isTMobileSuspended = $isTMobileSuspended;

        return $obj;
    }

    /**
     * Message flow description.
     */
    public function withMessageFlow(string $messageFlow): self
    {
        $obj = clone $this;
        $obj->messageFlow = $messageFlow;

        return $obj;
    }

    /**
     * When the campaign would be due for its next renew/bill date.
     */
    public function withNextRenewalOrExpirationDate(
        string $nextRenewalOrExpirationDate
    ): self {
        $obj = clone $this;
        $obj->nextRenewalOrExpirationDate = $nextRenewalOrExpirationDate;

        return $obj;
    }

    /**
     * Does campaign utilize pool of phone numbers?
     */
    public function withNumberPool(bool $numberPool): self
    {
        $obj = clone $this;
        $obj->numberPool = $numberPool;

        return $obj;
    }

    /**
     * Subscriber opt-in keywords. Multiple keywords are comma separated without space.
     */
    public function withOptinKeywords(string $optinKeywords): self
    {
        $obj = clone $this;
        $obj->optinKeywords = $optinKeywords;

        return $obj;
    }

    /**
     * Subscriber opt-in message.
     */
    public function withOptinMessage(string $optinMessage): self
    {
        $obj = clone $this;
        $obj->optinMessage = $optinMessage;

        return $obj;
    }

    /**
     * Subscriber opt-out keywords. Multiple keywords are comma separated without space.
     */
    public function withOptoutKeywords(string $optoutKeywords): self
    {
        $obj = clone $this;
        $obj->optoutKeywords = $optoutKeywords;

        return $obj;
    }

    /**
     * Subscriber opt-out message.
     */
    public function withOptoutMessage(string $optoutMessage): self
    {
        $obj = clone $this;
        $obj->optoutMessage = $optoutMessage;

        return $obj;
    }

    /**
     * Link to the campaign's privacy policy.
     */
    public function withPrivacyPolicyLink(string $privacyPolicyLink): self
    {
        $obj = clone $this;
        $obj->privacyPolicyLink = $privacyPolicyLink;

        return $obj;
    }

    /**
     * Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations.
     */
    public function withReferenceID(string $referenceID): self
    {
        $obj = clone $this;
        $obj->referenceID = $referenceID;

        return $obj;
    }

    /**
     * Alphanumeric identifier of the reseller that you want to associate with this campaign.
     */
    public function withResellerID(string $resellerID): self
    {
        $obj = clone $this;
        $obj->resellerID = $resellerID;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 1 or more message samples.
     */
    public function withSample1(string $sample1): self
    {
        $obj = clone $this;
        $obj->sample1 = $sample1;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 2 or more message samples.
     */
    public function withSample2(string $sample2): self
    {
        $obj = clone $this;
        $obj->sample2 = $sample2;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 3 or more message samples.
     */
    public function withSample3(string $sample3): self
    {
        $obj = clone $this;
        $obj->sample3 = $sample3;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 4 or more message samples.
     */
    public function withSample4(string $sample4): self
    {
        $obj = clone $this;
        $obj->sample4 = $sample4;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 5 or more message samples.
     */
    public function withSample5(string $sample5): self
    {
        $obj = clone $this;
        $obj->sample5 = $sample5;

        return $obj;
    }

    /**
     * Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status.
     */
    public function withStatus(string $status): self
    {
        $obj = clone $this;
        $obj->status = $status;

        return $obj;
    }

    /**
     * Campaign submission status.
     *
     * @param SubmissionStatus|value-of<SubmissionStatus> $submissionStatus
     */
    public function withSubmissionStatus(
        SubmissionStatus|string $submissionStatus
    ): self {
        $obj = clone $this;
        $obj->submissionStatus = $submissionStatus instanceof SubmissionStatus ? $submissionStatus->value : $submissionStatus;

        return $obj;
    }

    /**
     * Does campaign responds to help keyword(s)?
     */
    public function withSubscriberHelp(bool $subscriberHelp): self
    {
        $obj = clone $this;
        $obj->subscriberHelp = $subscriberHelp;

        return $obj;
    }

    /**
     * Does campaign require subscriber to opt-in before SMS is sent to subscriber?
     */
    public function withSubscriberOptin(bool $subscriberOptin): self
    {
        $obj = clone $this;
        $obj->subscriberOptin = $subscriberOptin;

        return $obj;
    }

    /**
     * Does campaign support subscriber opt-out keyword(s)?
     */
    public function withSubscriberOptout(bool $subscriberOptout): self
    {
        $obj = clone $this;
        $obj->subscriberOptout = $subscriberOptout;

        return $obj;
    }

    /**
     * Unique identifier assigned to the brand by the registry.
     */
    public function withTcrBrandID(string $tcrBrandID): self
    {
        $obj = clone $this;
        $obj->tcrBrandID = $tcrBrandID;

        return $obj;
    }

    /**
     * Unique identifier assigned to the campaign by the registry.
     */
    public function withTcrCampaignID(string $tcrCampaignID): self
    {
        $obj = clone $this;
        $obj->tcrCampaignID = $tcrCampaignID;

        return $obj;
    }

    /**
     * Link to the campaign's terms and conditions.
     */
    public function withTermsAndConditionsLink(
        string $termsAndConditionsLink
    ): self {
        $obj = clone $this;
        $obj->termsAndConditionsLink = $termsAndConditionsLink;

        return $obj;
    }

    /**
     * Business/industry segment of this campaign (Deprecated). Must be of defined valid types. Use `/registry/enum/vertical` operation to retrieve verticals available for given brand, vertical combination.
     *
     * This field is deprecated.
     */
    public function withVertical(string $vertical): self
    {
        $obj = clone $this;
        $obj->vertical = $vertical;

        return $obj;
    }

    /**
     * Failover webhook to which campaign status updates are sent.
     */
    public function withWebhookFailoverURL(string $webhookFailoverURL): self
    {
        $obj = clone $this;
        $obj->webhookFailoverURL = $webhookFailoverURL;

        return $obj;
    }

    /**
     * Webhook to which campaign status updates are sent.
     */
    public function withWebhookURL(string $webhookURL): self
    {
        $obj = clone $this;
        $obj->webhookURL = $webhookURL;

        return $obj;
    }
}
