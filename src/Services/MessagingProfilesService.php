<?php

declare(strict_types=1);

namespace Telnyx\Services;

use Telnyx\Client;
use Telnyx\Core\Exceptions\APIException;
use Telnyx\MessagingProfiles\MessagingProfileCreateParams;
use Telnyx\MessagingProfiles\MessagingProfileCreateParams\WebhookAPIVersion;
use Telnyx\MessagingProfiles\MessagingProfileDeleteResponse;
use Telnyx\MessagingProfiles\MessagingProfileGetResponse;
use Telnyx\MessagingProfiles\MessagingProfileListParams;
use Telnyx\MessagingProfiles\MessagingProfileListParams\Filter;
use Telnyx\MessagingProfiles\MessagingProfileListParams\Page;
use Telnyx\MessagingProfiles\MessagingProfileListPhoneNumbersParams;
use Telnyx\MessagingProfiles\MessagingProfileListPhoneNumbersResponse;
use Telnyx\MessagingProfiles\MessagingProfileListResponse;
use Telnyx\MessagingProfiles\MessagingProfileListShortCodesParams;
use Telnyx\MessagingProfiles\MessagingProfileListShortCodesResponse;
use Telnyx\MessagingProfiles\MessagingProfileNewResponse;
use Telnyx\MessagingProfiles\MessagingProfileUpdateParams;
use Telnyx\MessagingProfiles\MessagingProfileUpdateResponse;
use Telnyx\MessagingProfiles\NumberPoolSettings;
use Telnyx\MessagingProfiles\URLShortenerSettings;
use Telnyx\RequestOptions;
use Telnyx\ServiceContracts\MessagingProfilesContract;
use Telnyx\Services\MessagingProfiles\AutorespConfigsService;

use const Telnyx\Core\OMIT as omit;

final class MessagingProfilesService implements MessagingProfilesContract
{
    /**
     * @@api
     */
    public AutorespConfigsService $autorespConfigs;

    /**
     * @internal
     */
    public function __construct(private Client $client)
    {
        $this->autorespConfigs = new AutorespConfigsService($client);
    }

    /**
     * @api
     *
     * Create a messaging profile
     *
     * @param string $name a user friendly name for the messaging profile
     * @param list<string> $whitelistedDestinations Destinations to which the messaging profile is allowed to send. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `["*"]` all destinations will be allowed.
     * @param string|null $alphaSender the alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender ID
     * @param string $dailySpendLimit the maximum amount of money (in USD) that can be spent by this profile before midnight UTC
     * @param bool $dailySpendLimitEnabled whether to enforce the value configured by `daily_spend_limit`
     * @param bool $enabled specifies whether the messaging profile is enabled or not
     * @param bool $mmsFallBackToSMS enables SMS fallback for MMS messages
     * @param bool $mmsTranscoding enables automated resizing of MMS media
     * @param NumberPoolSettings|null $numberPoolSettings Number Pool allows you to send messages from a pool of numbers of different types, assigning
     * weights to each type. The pool consists of all the long code and toll free numbers
     * assigned to the messaging profile.
     *
     * To disable this feature, set the object field to `null`.
     * @param URLShortenerSettings|null $urlShortenerSettings The URL shortener feature allows automatic replacement of URLs that were generated using
     * a public URL shortener service. Some examples include bit.do, bit.ly, goo.gl, ht.ly,
     * is.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com. Such URLs are replaced with
     * with links generated by Telnyx. The use of custom links can improve branding and message
     * deliverability.
     *
     * To disable this feature, set the object field to `null`.
     * @param WebhookAPIVersion|value-of<WebhookAPIVersion> $webhookAPIVersion determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format
     * @param string|null $webhookFailoverURL the failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails
     * @param string|null $webhookURL the URL where webhooks related to this messaging profile will be sent
     *
     * @throws APIException
     */
    public function create(
        $name,
        $whitelistedDestinations,
        $alphaSender = omit,
        $dailySpendLimit = omit,
        $dailySpendLimitEnabled = omit,
        $enabled = omit,
        $mmsFallBackToSMS = omit,
        $mmsTranscoding = omit,
        $numberPoolSettings = omit,
        $urlShortenerSettings = omit,
        $webhookAPIVersion = omit,
        $webhookFailoverURL = omit,
        $webhookURL = omit,
        ?RequestOptions $requestOptions = null,
    ): MessagingProfileNewResponse {
        $params = [
            'name' => $name,
            'whitelistedDestinations' => $whitelistedDestinations,
            'alphaSender' => $alphaSender,
            'dailySpendLimit' => $dailySpendLimit,
            'dailySpendLimitEnabled' => $dailySpendLimitEnabled,
            'enabled' => $enabled,
            'mmsFallBackToSMS' => $mmsFallBackToSMS,
            'mmsTranscoding' => $mmsTranscoding,
            'numberPoolSettings' => $numberPoolSettings,
            'urlShortenerSettings' => $urlShortenerSettings,
            'webhookAPIVersion' => $webhookAPIVersion,
            'webhookFailoverURL' => $webhookFailoverURL,
            'webhookURL' => $webhookURL,
        ];

        return $this->createRaw($params, $requestOptions);
    }

    /**
     * @api
     *
     * @param array<string, mixed> $params
     *
     * @throws APIException
     */
    public function createRaw(
        array $params,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileNewResponse {
        [$parsed, $options] = MessagingProfileCreateParams::parseRequest(
            $params,
            $requestOptions
        );

        // @phpstan-ignore-next-line;
        return $this->client->request(
            method: 'post',
            path: 'messaging_profiles',
            body: (object) $parsed,
            options: $options,
            convert: MessagingProfileNewResponse::class,
        );
    }

    /**
     * @api
     *
     * Retrieve a messaging profile
     *
     * @throws APIException
     */
    public function retrieve(
        string $id,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileGetResponse {
        // @phpstan-ignore-next-line;
        return $this->client->request(
            method: 'get',
            path: ['messaging_profiles/%1$s', $id],
            options: $requestOptions,
            convert: MessagingProfileGetResponse::class,
        );
    }

    /**
     * @api
     *
     * Update a messaging profile
     *
     * @param string|null $alphaSender the alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender ID
     * @param string $dailySpendLimit the maximum amount of money (in USD) that can be spent by this profile before midnight UTC
     * @param bool $dailySpendLimitEnabled whether to enforce the value configured by `daily_spend_limit`
     * @param bool $enabled specifies whether the messaging profile is enabled or not
     * @param bool $mmsFallBackToSMS enables SMS fallback for MMS messages
     * @param bool $mmsTranscoding enables automated resizing of MMS media
     * @param string $name a user friendly name for the messaging profile
     * @param NumberPoolSettings|null $numberPoolSettings Number Pool allows you to send messages from a pool of numbers of different types, assigning
     * weights to each type. The pool consists of all the long code and toll free numbers
     * assigned to the messaging profile.
     *
     * To disable this feature, set the object field to `null`.
     * @param URLShortenerSettings|null $urlShortenerSettings The URL shortener feature allows automatic replacement of URLs that were generated using
     * a public URL shortener service. Some examples include bit.do, bit.ly, goo.gl, ht.ly,
     * is.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com. Such URLs are replaced with
     * with links generated by Telnyx. The use of custom links can improve branding and message
     * deliverability.
     *
     * To disable this feature, set the object field to `null`.
     * @param string $v1Secret secret used to authenticate with v1 endpoints
     * @param Telnyx\MessagingProfiles\MessagingProfileUpdateParams\WebhookAPIVersion|value-of<Telnyx\MessagingProfiles\MessagingProfileUpdateParams\WebhookAPIVersion> $webhookAPIVersion determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format
     * @param string|null $webhookFailoverURL the failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails
     * @param string|null $webhookURL the URL where webhooks related to this messaging profile will be sent
     * @param list<string> $whitelistedDestinations Destinations to which the messaging profile is allowed to send. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
     *
     * This field is required if the messaging profile doesn't have it defined yet.
     *
     * @throws APIException
     */
    public function update(
        string $id,
        $alphaSender = omit,
        $dailySpendLimit = omit,
        $dailySpendLimitEnabled = omit,
        $enabled = omit,
        $mmsFallBackToSMS = omit,
        $mmsTranscoding = omit,
        $name = omit,
        $numberPoolSettings = omit,
        $urlShortenerSettings = omit,
        $v1Secret = omit,
        $webhookAPIVersion = omit,
        $webhookFailoverURL = omit,
        $webhookURL = omit,
        $whitelistedDestinations = omit,
        ?RequestOptions $requestOptions = null,
    ): MessagingProfileUpdateResponse {
        $params = [
            'alphaSender' => $alphaSender,
            'dailySpendLimit' => $dailySpendLimit,
            'dailySpendLimitEnabled' => $dailySpendLimitEnabled,
            'enabled' => $enabled,
            'mmsFallBackToSMS' => $mmsFallBackToSMS,
            'mmsTranscoding' => $mmsTranscoding,
            'name' => $name,
            'numberPoolSettings' => $numberPoolSettings,
            'urlShortenerSettings' => $urlShortenerSettings,
            'v1Secret' => $v1Secret,
            'webhookAPIVersion' => $webhookAPIVersion,
            'webhookFailoverURL' => $webhookFailoverURL,
            'webhookURL' => $webhookURL,
            'whitelistedDestinations' => $whitelistedDestinations,
        ];

        return $this->updateRaw($id, $params, $requestOptions);
    }

    /**
     * @api
     *
     * @param array<string, mixed> $params
     *
     * @throws APIException
     */
    public function updateRaw(
        string $id,
        array $params,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileUpdateResponse {
        [$parsed, $options] = MessagingProfileUpdateParams::parseRequest(
            $params,
            $requestOptions
        );

        // @phpstan-ignore-next-line;
        return $this->client->request(
            method: 'patch',
            path: ['messaging_profiles/%1$s', $id],
            body: (object) $parsed,
            options: $options,
            convert: MessagingProfileUpdateResponse::class,
        );
    }

    /**
     * @api
     *
     * List messaging profiles
     *
     * @param Filter $filter Consolidated filter parameter (deepObject style). Originally: filter[name]
     * @param Page $page Consolidated page parameter (deepObject style). Originally: page[number], page[size]
     *
     * @throws APIException
     */
    public function list(
        $filter = omit,
        $page = omit,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileListResponse {
        $params = ['filter' => $filter, 'page' => $page];

        return $this->listRaw($params, $requestOptions);
    }

    /**
     * @api
     *
     * @param array<string, mixed> $params
     *
     * @throws APIException
     */
    public function listRaw(
        array $params,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileListResponse {
        [$parsed, $options] = MessagingProfileListParams::parseRequest(
            $params,
            $requestOptions
        );

        // @phpstan-ignore-next-line;
        return $this->client->request(
            method: 'get',
            path: 'messaging_profiles',
            query: $parsed,
            options: $options,
            convert: MessagingProfileListResponse::class,
        );
    }

    /**
     * @api
     *
     * Delete a messaging profile
     *
     * @throws APIException
     */
    public function delete(
        string $id,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileDeleteResponse {
        // @phpstan-ignore-next-line;
        return $this->client->request(
            method: 'delete',
            path: ['messaging_profiles/%1$s', $id],
            options: $requestOptions,
            convert: MessagingProfileDeleteResponse::class,
        );
    }

    /**
     * @api
     *
     * List phone numbers associated with a messaging profile
     *
     * @param Telnyx\MessagingProfiles\MessagingProfileListPhoneNumbersParams\Page $page Consolidated page parameter (deepObject style). Originally: page[number], page[size]
     *
     * @throws APIException
     */
    public function listPhoneNumbers(
        string $id,
        $page = omit,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileListPhoneNumbersResponse {
        $params = ['page' => $page];

        return $this->listPhoneNumbersRaw($id, $params, $requestOptions);
    }

    /**
     * @api
     *
     * @param array<string, mixed> $params
     *
     * @throws APIException
     */
    public function listPhoneNumbersRaw(
        string $id,
        array $params,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileListPhoneNumbersResponse {
        [$parsed, $options] = MessagingProfileListPhoneNumbersParams::parseRequest(
            $params,
            $requestOptions
        );

        // @phpstan-ignore-next-line;
        return $this->client->request(
            method: 'get',
            path: ['messaging_profiles/%1$s/phone_numbers', $id],
            query: $parsed,
            options: $options,
            convert: MessagingProfileListPhoneNumbersResponse::class,
        );
    }

    /**
     * @api
     *
     * List short codes associated with a messaging profile
     *
     * @param Telnyx\MessagingProfiles\MessagingProfileListShortCodesParams\Page $page Consolidated page parameter (deepObject style). Originally: page[number], page[size]
     *
     * @throws APIException
     */
    public function listShortCodes(
        string $id,
        $page = omit,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileListShortCodesResponse {
        $params = ['page' => $page];

        return $this->listShortCodesRaw($id, $params, $requestOptions);
    }

    /**
     * @api
     *
     * @param array<string, mixed> $params
     *
     * @throws APIException
     */
    public function listShortCodesRaw(
        string $id,
        array $params,
        ?RequestOptions $requestOptions = null
    ): MessagingProfileListShortCodesResponse {
        [$parsed, $options] = MessagingProfileListShortCodesParams::parseRequest(
            $params,
            $requestOptions
        );

        // @phpstan-ignore-next-line;
        return $this->client->request(
            method: 'get',
            path: ['messaging_profiles/%1$s/short_codes', $id],
            query: $parsed,
            options: $options,
            convert: MessagingProfileListShortCodesResponse::class,
        );
    }
}
