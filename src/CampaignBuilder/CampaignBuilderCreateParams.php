<?php

declare(strict_types=1);

namespace Telnyx\CampaignBuilder;

use Telnyx\Core\Attributes\Api;
use Telnyx\Core\Concerns\SdkModel;
use Telnyx\Core\Concerns\SdkParams;
use Telnyx\Core\Contracts\BaseModel;

/**
 * An object containing the method's parameters.
 * Example usage:
 * ```
 * $params = (new CampaignBuilderCreateParams); // set properties as needed
 * $client->campaignBuilder->create(...$params->toArray());
 * ```
 * Before creating a campaign, use the [Qualify By Usecase endpoint](https://developers.telnyx.com/api/messaging/10dlc/get-usecase-qualification) to ensure that the brand you want to assign a new campaign to is qualified for the desired use case of that campaign. **Please note:** After campaign creation, you'll only be able to edit the campaign's sample messages. Creating a campaign will entail an upfront, non-refundable three month's cost that will depend on the campaign's use case ([see 10DLC Costs section for details](https://developers.telnyx.com/docs/messaging/10dlc/concepts#10dlc-costs)).
 *
 * @method toArray()
 *   Returns the parameters as an associative array suitable for passing to the client method.
 *
 *   `$client->campaignBuilder->create(...$params->toArray());`
 *
 * @see Telnyx\CampaignBuilder->create
 *
 * @phpstan-type campaign_builder_create_params = array{
 *   brandID: string,
 *   description: string,
 *   usecase: string,
 *   ageGated?: bool,
 *   autoRenewal?: bool,
 *   directLending?: bool,
 *   embeddedLink?: bool,
 *   embeddedLinkSample?: string,
 *   embeddedPhone?: bool,
 *   helpKeywords?: string,
 *   helpMessage?: string,
 *   messageFlow?: string,
 *   mnoIDs?: list<int>,
 *   numberPool?: bool,
 *   optinKeywords?: string,
 *   optinMessage?: string,
 *   optoutKeywords?: string,
 *   optoutMessage?: string,
 *   privacyPolicyLink?: string,
 *   referenceID?: string,
 *   resellerID?: string,
 *   sample1?: string,
 *   sample2?: string,
 *   sample3?: string,
 *   sample4?: string,
 *   sample5?: string,
 *   subscriberHelp?: bool,
 *   subscriberOptin?: bool,
 *   subscriberOptout?: bool,
 *   subUsecases?: list<string>,
 *   tag?: list<string>,
 *   termsAndConditions?: bool,
 *   termsAndConditionsLink?: string,
 *   webhookFailoverURL?: string,
 *   webhookURL?: string,
 * }
 */
final class CampaignBuilderCreateParams implements BaseModel
{
    /** @use SdkModel<campaign_builder_create_params> */
    use SdkModel;
    use SdkParams;

    /**
     * Alphanumeric identifier of the brand associated with this campaign.
     */
    #[Api('brandId')]
    public string $brandID;

    /**
     * Summary description of this campaign.
     */
    #[Api]
    public string $description;

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     */
    #[Api]
    public string $usecase;

    /**
     * Age gated message content in campaign.
     */
    #[Api(optional: true)]
    public ?bool $ageGated;

    /**
     * Campaign subscription auto-renewal option. If set to true, then campaign will automatically renewal at end of billing cycle.
     */
    #[Api(optional: true)]
    public ?bool $autoRenewal;

    /**
     * Direct lending or loan arrangement.
     */
    #[Api(optional: true)]
    public ?bool $directLending;

    /**
     * Does message generated by the campaign include URL link in SMS?
     */
    #[Api(optional: true)]
    public ?bool $embeddedLink;

    /**
     * Sample of an embedded link that will be sent to subscribers.
     */
    #[Api(optional: true)]
    public ?string $embeddedLinkSample;

    /**
     * Does message generated by the campaign include phone number in SMS?
     */
    #[Api(optional: true)]
    public ?bool $embeddedPhone;

    /**
     * Subscriber help keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $helpKeywords;

    /**
     * Help message of the campaign.
     */
    #[Api(optional: true)]
    public ?string $helpMessage;

    /**
     * Message flow description.
     */
    #[Api(optional: true)]
    public ?string $messageFlow;

    /**
     * Submit campaign to given list of MNOs by MNO's network ID. Default is all MNOs if no value provided.
     *
     * @var list<int>|null $mnoIDs
     */
    #[Api('mnoIds', list: 'int', optional: true)]
    public ?array $mnoIDs;

    /**
     * Does campaign utilize pool of phone numbers?
     */
    #[Api(optional: true)]
    public ?bool $numberPool;

    /**
     * Subscriber opt-in keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $optinKeywords;

    /**
     * Subscriber opt-in message.
     */
    #[Api(optional: true)]
    public ?string $optinMessage;

    /**
     * Subscriber opt-out keywords. Multiple keywords are comma separated without space.
     */
    #[Api(optional: true)]
    public ?string $optoutKeywords;

    /**
     * Subscriber opt-out message.
     */
    #[Api(optional: true)]
    public ?string $optoutMessage;

    /**
     * Link to the campaign's privacy policy.
     */
    #[Api(optional: true)]
    public ?string $privacyPolicyLink;

    /**
     * Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations.
     */
    #[Api('referenceId', optional: true)]
    public ?string $referenceID;

    /**
     * Alphanumeric identifier of the reseller that you want to associate with this campaign.
     */
    #[Api('resellerId', optional: true)]
    public ?string $resellerID;

    /**
     * Message sample. Some campaign tiers require 1 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample1;

    /**
     * Message sample. Some campaign tiers require 2 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample2;

    /**
     * Message sample. Some campaign tiers require 3 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample3;

    /**
     * Message sample. Some campaign tiers require 4 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample4;

    /**
     * Message sample. Some campaign tiers require 5 or more message samples.
     */
    #[Api(optional: true)]
    public ?string $sample5;

    /**
     * Does campaign responds to help keyword(s)?
     */
    #[Api(optional: true)]
    public ?bool $subscriberHelp;

    /**
     * Does campaign require subscriber to opt-in before SMS is sent to subscriber?
     */
    #[Api(optional: true)]
    public ?bool $subscriberOptin;

    /**
     * Does campaign support subscriber opt-out keyword(s)?
     */
    #[Api(optional: true)]
    public ?bool $subscriberOptout;

    /**
     * Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases.
     *
     * @var list<string>|null $subUsecases
     */
    #[Api(list: 'string', optional: true)]
    public ?array $subUsecases;

    /**
     * Tags to be set on the Campaign.
     *
     * @var list<string>|null $tag
     */
    #[Api(list: 'string', optional: true)]
    public ?array $tag;

    /**
     * Is terms and conditions accepted?
     */
    #[Api(optional: true)]
    public ?bool $termsAndConditions;

    /**
     * Link to the campaign's terms and conditions.
     */
    #[Api(optional: true)]
    public ?string $termsAndConditionsLink;

    /**
     * Failover webhook to which campaign status updates are sent.
     */
    #[Api(optional: true)]
    public ?string $webhookFailoverURL;

    /**
     * Webhook to which campaign status updates are sent.
     */
    #[Api(optional: true)]
    public ?string $webhookURL;

    /**
     * `new CampaignBuilderCreateParams()` is missing required properties by the API.
     *
     * To enforce required parameters use
     * ```
     * CampaignBuilderCreateParams::with(brandID: ..., description: ..., usecase: ...)
     * ```
     *
     * Otherwise ensure the following setters are called
     *
     * ```
     * (new CampaignBuilderCreateParams)
     *   ->withBrandID(...)
     *   ->withDescription(...)
     *   ->withUsecase(...)
     * ```
     */
    public function __construct()
    {
        $this->initialize();
    }

    /**
     * Construct an instance from the required parameters.
     *
     * You must use named parameters to construct any parameters with a default value.
     *
     * @param list<int> $mnoIDs
     * @param list<string> $subUsecases
     * @param list<string> $tag
     */
    public static function with(
        string $brandID,
        string $description,
        string $usecase,
        ?bool $ageGated = null,
        ?bool $autoRenewal = null,
        ?bool $directLending = null,
        ?bool $embeddedLink = null,
        ?string $embeddedLinkSample = null,
        ?bool $embeddedPhone = null,
        ?string $helpKeywords = null,
        ?string $helpMessage = null,
        ?string $messageFlow = null,
        ?array $mnoIDs = null,
        ?bool $numberPool = null,
        ?string $optinKeywords = null,
        ?string $optinMessage = null,
        ?string $optoutKeywords = null,
        ?string $optoutMessage = null,
        ?string $privacyPolicyLink = null,
        ?string $referenceID = null,
        ?string $resellerID = null,
        ?string $sample1 = null,
        ?string $sample2 = null,
        ?string $sample3 = null,
        ?string $sample4 = null,
        ?string $sample5 = null,
        ?bool $subscriberHelp = null,
        ?bool $subscriberOptin = null,
        ?bool $subscriberOptout = null,
        ?array $subUsecases = null,
        ?array $tag = null,
        ?bool $termsAndConditions = null,
        ?string $termsAndConditionsLink = null,
        ?string $webhookFailoverURL = null,
        ?string $webhookURL = null,
    ): self {
        $obj = new self;

        $obj->brandID = $brandID;
        $obj->description = $description;
        $obj->usecase = $usecase;

        null !== $ageGated && $obj->ageGated = $ageGated;
        null !== $autoRenewal && $obj->autoRenewal = $autoRenewal;
        null !== $directLending && $obj->directLending = $directLending;
        null !== $embeddedLink && $obj->embeddedLink = $embeddedLink;
        null !== $embeddedLinkSample && $obj->embeddedLinkSample = $embeddedLinkSample;
        null !== $embeddedPhone && $obj->embeddedPhone = $embeddedPhone;
        null !== $helpKeywords && $obj->helpKeywords = $helpKeywords;
        null !== $helpMessage && $obj->helpMessage = $helpMessage;
        null !== $messageFlow && $obj->messageFlow = $messageFlow;
        null !== $mnoIDs && $obj->mnoIDs = $mnoIDs;
        null !== $numberPool && $obj->numberPool = $numberPool;
        null !== $optinKeywords && $obj->optinKeywords = $optinKeywords;
        null !== $optinMessage && $obj->optinMessage = $optinMessage;
        null !== $optoutKeywords && $obj->optoutKeywords = $optoutKeywords;
        null !== $optoutMessage && $obj->optoutMessage = $optoutMessage;
        null !== $privacyPolicyLink && $obj->privacyPolicyLink = $privacyPolicyLink;
        null !== $referenceID && $obj->referenceID = $referenceID;
        null !== $resellerID && $obj->resellerID = $resellerID;
        null !== $sample1 && $obj->sample1 = $sample1;
        null !== $sample2 && $obj->sample2 = $sample2;
        null !== $sample3 && $obj->sample3 = $sample3;
        null !== $sample4 && $obj->sample4 = $sample4;
        null !== $sample5 && $obj->sample5 = $sample5;
        null !== $subscriberHelp && $obj->subscriberHelp = $subscriberHelp;
        null !== $subscriberOptin && $obj->subscriberOptin = $subscriberOptin;
        null !== $subscriberOptout && $obj->subscriberOptout = $subscriberOptout;
        null !== $subUsecases && $obj->subUsecases = $subUsecases;
        null !== $tag && $obj->tag = $tag;
        null !== $termsAndConditions && $obj->termsAndConditions = $termsAndConditions;
        null !== $termsAndConditionsLink && $obj->termsAndConditionsLink = $termsAndConditionsLink;
        null !== $webhookFailoverURL && $obj->webhookFailoverURL = $webhookFailoverURL;
        null !== $webhookURL && $obj->webhookURL = $webhookURL;

        return $obj;
    }

    /**
     * Alphanumeric identifier of the brand associated with this campaign.
     */
    public function withBrandID(string $brandID): self
    {
        $obj = clone $this;
        $obj->brandID = $brandID;

        return $obj;
    }

    /**
     * Summary description of this campaign.
     */
    public function withDescription(string $description): self
    {
        $obj = clone $this;
        $obj->description = $description;

        return $obj;
    }

    /**
     * Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     */
    public function withUsecase(string $usecase): self
    {
        $obj = clone $this;
        $obj->usecase = $usecase;

        return $obj;
    }

    /**
     * Age gated message content in campaign.
     */
    public function withAgeGated(bool $ageGated): self
    {
        $obj = clone $this;
        $obj->ageGated = $ageGated;

        return $obj;
    }

    /**
     * Campaign subscription auto-renewal option. If set to true, then campaign will automatically renewal at end of billing cycle.
     */
    public function withAutoRenewal(bool $autoRenewal): self
    {
        $obj = clone $this;
        $obj->autoRenewal = $autoRenewal;

        return $obj;
    }

    /**
     * Direct lending or loan arrangement.
     */
    public function withDirectLending(bool $directLending): self
    {
        $obj = clone $this;
        $obj->directLending = $directLending;

        return $obj;
    }

    /**
     * Does message generated by the campaign include URL link in SMS?
     */
    public function withEmbeddedLink(bool $embeddedLink): self
    {
        $obj = clone $this;
        $obj->embeddedLink = $embeddedLink;

        return $obj;
    }

    /**
     * Sample of an embedded link that will be sent to subscribers.
     */
    public function withEmbeddedLinkSample(string $embeddedLinkSample): self
    {
        $obj = clone $this;
        $obj->embeddedLinkSample = $embeddedLinkSample;

        return $obj;
    }

    /**
     * Does message generated by the campaign include phone number in SMS?
     */
    public function withEmbeddedPhone(bool $embeddedPhone): self
    {
        $obj = clone $this;
        $obj->embeddedPhone = $embeddedPhone;

        return $obj;
    }

    /**
     * Subscriber help keywords. Multiple keywords are comma separated without space.
     */
    public function withHelpKeywords(string $helpKeywords): self
    {
        $obj = clone $this;
        $obj->helpKeywords = $helpKeywords;

        return $obj;
    }

    /**
     * Help message of the campaign.
     */
    public function withHelpMessage(string $helpMessage): self
    {
        $obj = clone $this;
        $obj->helpMessage = $helpMessage;

        return $obj;
    }

    /**
     * Message flow description.
     */
    public function withMessageFlow(string $messageFlow): self
    {
        $obj = clone $this;
        $obj->messageFlow = $messageFlow;

        return $obj;
    }

    /**
     * Submit campaign to given list of MNOs by MNO's network ID. Default is all MNOs if no value provided.
     *
     * @param list<int> $mnoIDs
     */
    public function withMnoIDs(array $mnoIDs): self
    {
        $obj = clone $this;
        $obj->mnoIDs = $mnoIDs;

        return $obj;
    }

    /**
     * Does campaign utilize pool of phone numbers?
     */
    public function withNumberPool(bool $numberPool): self
    {
        $obj = clone $this;
        $obj->numberPool = $numberPool;

        return $obj;
    }

    /**
     * Subscriber opt-in keywords. Multiple keywords are comma separated without space.
     */
    public function withOptinKeywords(string $optinKeywords): self
    {
        $obj = clone $this;
        $obj->optinKeywords = $optinKeywords;

        return $obj;
    }

    /**
     * Subscriber opt-in message.
     */
    public function withOptinMessage(string $optinMessage): self
    {
        $obj = clone $this;
        $obj->optinMessage = $optinMessage;

        return $obj;
    }

    /**
     * Subscriber opt-out keywords. Multiple keywords are comma separated without space.
     */
    public function withOptoutKeywords(string $optoutKeywords): self
    {
        $obj = clone $this;
        $obj->optoutKeywords = $optoutKeywords;

        return $obj;
    }

    /**
     * Subscriber opt-out message.
     */
    public function withOptoutMessage(string $optoutMessage): self
    {
        $obj = clone $this;
        $obj->optoutMessage = $optoutMessage;

        return $obj;
    }

    /**
     * Link to the campaign's privacy policy.
     */
    public function withPrivacyPolicyLink(string $privacyPolicyLink): self
    {
        $obj = clone $this;
        $obj->privacyPolicyLink = $privacyPolicyLink;

        return $obj;
    }

    /**
     * Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations.
     */
    public function withReferenceID(string $referenceID): self
    {
        $obj = clone $this;
        $obj->referenceID = $referenceID;

        return $obj;
    }

    /**
     * Alphanumeric identifier of the reseller that you want to associate with this campaign.
     */
    public function withResellerID(string $resellerID): self
    {
        $obj = clone $this;
        $obj->resellerID = $resellerID;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 1 or more message samples.
     */
    public function withSample1(string $sample1): self
    {
        $obj = clone $this;
        $obj->sample1 = $sample1;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 2 or more message samples.
     */
    public function withSample2(string $sample2): self
    {
        $obj = clone $this;
        $obj->sample2 = $sample2;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 3 or more message samples.
     */
    public function withSample3(string $sample3): self
    {
        $obj = clone $this;
        $obj->sample3 = $sample3;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 4 or more message samples.
     */
    public function withSample4(string $sample4): self
    {
        $obj = clone $this;
        $obj->sample4 = $sample4;

        return $obj;
    }

    /**
     * Message sample. Some campaign tiers require 5 or more message samples.
     */
    public function withSample5(string $sample5): self
    {
        $obj = clone $this;
        $obj->sample5 = $sample5;

        return $obj;
    }

    /**
     * Does campaign responds to help keyword(s)?
     */
    public function withSubscriberHelp(bool $subscriberHelp): self
    {
        $obj = clone $this;
        $obj->subscriberHelp = $subscriberHelp;

        return $obj;
    }

    /**
     * Does campaign require subscriber to opt-in before SMS is sent to subscriber?
     */
    public function withSubscriberOptin(bool $subscriberOptin): self
    {
        $obj = clone $this;
        $obj->subscriberOptin = $subscriberOptin;

        return $obj;
    }

    /**
     * Does campaign support subscriber opt-out keyword(s)?
     */
    public function withSubscriberOptout(bool $subscriberOptout): self
    {
        $obj = clone $this;
        $obj->subscriberOptout = $subscriberOptout;

        return $obj;
    }

    /**
     * Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases.
     *
     * @param list<string> $subUsecases
     */
    public function withSubUsecases(array $subUsecases): self
    {
        $obj = clone $this;
        $obj->subUsecases = $subUsecases;

        return $obj;
    }

    /**
     * Tags to be set on the Campaign.
     *
     * @param list<string> $tag
     */
    public function withTag(array $tag): self
    {
        $obj = clone $this;
        $obj->tag = $tag;

        return $obj;
    }

    /**
     * Is terms and conditions accepted?
     */
    public function withTermsAndConditions(bool $termsAndConditions): self
    {
        $obj = clone $this;
        $obj->termsAndConditions = $termsAndConditions;

        return $obj;
    }

    /**
     * Link to the campaign's terms and conditions.
     */
    public function withTermsAndConditionsLink(
        string $termsAndConditionsLink
    ): self {
        $obj = clone $this;
        $obj->termsAndConditionsLink = $termsAndConditionsLink;

        return $obj;
    }

    /**
     * Failover webhook to which campaign status updates are sent.
     */
    public function withWebhookFailoverURL(string $webhookFailoverURL): self
    {
        $obj = clone $this;
        $obj->webhookFailoverURL = $webhookFailoverURL;

        return $obj;
    }

    /**
     * Webhook to which campaign status updates are sent.
     */
    public function withWebhookURL(string $webhookURL): self
    {
        $obj = clone $this;
        $obj->webhookURL = $webhookURL;

        return $obj;
    }
}
